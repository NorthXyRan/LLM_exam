import { defineStore } from 'pinia'
import { computed, ref } from 'vue'

// ===== Êï∞ÊçÆÁ±ªÂûãÂÆö‰πâ =====
export interface Question {
  question_id: number
  question: string
  score: number
}

export interface ReferenceAnswer {
  question_id: number
  answer: string
}

export interface StudentAnswer {
  student_id: number
  question_id: number
  answer: string
}

export interface StudentInfo {
  id: number
}

export interface HighlightItem {
  'Student answer': string
  'Scoring point': number
  reason: string
}

export interface HighlightData {
  student_id: number
  question_id: number
  answer: {
    correct: HighlightItem[]
    wrong: HighlightItem[]
    unclear: HighlightItem[]
    redundant: HighlightItem[]
  }
  total_score: number
}

// ===== Ê†∏ÂøÉÊï∞ÊçÆÂ≠òÂÇ® =====
export const useExamDataStore = defineStore('examData', () => {
  // ===== Áä∂ÊÄÅ =====
  const questions = ref<Question[]>([])
  const referenceAnswers = ref<ReferenceAnswer[]>([])
  const studentAnswers = ref<StudentAnswer[]>([])
  const studentList = ref<StudentInfo[]>([])
  const highlightDataList = ref<HighlightData[]>([])

  // ===== ËÆ°ÁÆóÂ±ûÊÄß =====
  const questionCount = computed(() => questions.value.length)
  const referenceAnswerCount = computed(() => referenceAnswers.value.length)
  const studentCount = computed(() => studentList.value.length)
  const totalAnswerCount = computed(() => studentAnswers.value.length)

  // Ëé∑ÂèñÊåáÂÆöÈ¢òÁõÆ
  const getQuestionById = (questionId: number) => {
    return questions.value.find((q) => q.question_id === questionId)
  }

  // Ëé∑ÂèñÊåáÂÆöÈ¢òÁõÆÁöÑÂèÇËÄÉÁ≠îÊ°à
  const getReferenceAnswer = (questionId: number) => {
    return referenceAnswers.value.find((ans) => ans.question_id === questionId)
  }

  // Ëé∑ÂèñÊåáÂÆöÂ≠¶ÁîüÁöÑÁ≠îÊ°à
  const getStudentAnswer = (studentId: number, questionId: number) => {
    return studentAnswers.value.find(
      (ans) => ans.student_id === studentId && ans.question_id === questionId,
    )
  }

  // Ëé∑ÂèñÊåáÂÆöÁöÑÈ´ò‰∫ÆÊï∞ÊçÆ
  const getHighlightData = (studentId: number, questionId: number) => {
    return highlightDataList.value.find(
      (data) => data.student_id === studentId && data.question_id === questionId,
    )
  }

  // Ê£ÄÊü•Êï∞ÊçÆÂÆåÊï¥ÊÄß
  const isDataComplete = computed(() => {
    return questions.value.length > 0 && studentAnswers.value.length > 0
  })

  // ===== Âü∫Á°ÄÊìç‰ΩúÊñπÊ≥ï =====

  // ËÆæÁΩÆÈ¢òÁõÆÊï∞ÊçÆ
  const setQuestions = (questionsData: Question[]) => {
    questions.value = questionsData
  }

  // ËÆæÁΩÆÂ≠¶ÁîüÁ≠îÊ°àÊï∞ÊçÆ
  const setStudentAnswers = (answersData: StudentAnswer[]) => {
    studentAnswers.value = answersData
    // Ëá™Âä®ÁîüÊàêÂ≠¶ÁîüÂàóË°®
    const uniqueStudentIds = [...new Set(answersData.map((item) => item.student_id))]
    studentList.value = uniqueStudentIds.map((id) => ({ id }))
  }

  // ËÆæÁΩÆÈ´ò‰∫ÆÊï∞ÊçÆ
  const setHighlightData = (highlightData: HighlightData[]) => {
    highlightDataList.value = highlightData
  }

  // Ê∑ªÂä†Âçï‰∏™È¢òÁõÆ
  const addQuestion = (question: Question) => {
    const existingIndex = questions.value.findIndex((q) => q.question_id === question.question_id)
    if (existingIndex >= 0) {
      questions.value[existingIndex] = question
    } else {
      questions.value.push(question)
    }
  }

  // ËÆæÁΩÆÂèÇËÄÉÁ≠îÊ°àÊï∞ÊçÆ
  const setReferenceAnswers = (answersData: ReferenceAnswer[]) => {
    referenceAnswers.value = answersData
  }

  // Êõ¥Êñ∞Âçï‰∏™ÂèÇËÄÉÁ≠îÊ°à
  const updateReferenceAnswer = (questionId: number, answer: string) => {
    const existingIndex = referenceAnswers.value.findIndex((ans) => ans.question_id === questionId)
    if (existingIndex >= 0) {
      referenceAnswers.value[existingIndex] = { question_id: questionId, answer }
    } else {
      referenceAnswers.value.push({ question_id: questionId, answer })
    }
  }

  // ÊâπÈáèÊõ¥Êñ∞ÂèÇËÄÉÁ≠îÊ°à
  const updateReferenceAnswers = (newAnswers: { question_id: number; answer: string }[]) => {
    referenceAnswers.value = newAnswers.map((ans) => ({
      question_id: ans.question_id,
      answer: ans.answer,
    }))
  }

  // Ê∏ÖÈô§ÊâÄÊúâÂèÇËÄÉÁ≠îÊ°à
  const clearReferenceAnswers = () => {
    referenceAnswers.value = []
  }

  // Ê∑ªÂä†Â≠¶ÁîüÁ≠îÊ°à
  const addStudentAnswer = (answer: StudentAnswer) => {
    const existingIndex = studentAnswers.value.findIndex(
      (ans) => ans.student_id === answer.student_id && ans.question_id === answer.question_id,
    )
    if (existingIndex >= 0) {
      studentAnswers.value[existingIndex] = answer
    } else {
      studentAnswers.value.push(answer)
    }

    // Êõ¥Êñ∞Â≠¶ÁîüÂàóË°®
    const studentExists = studentList.value.some((student) => student.id === answer.student_id)
    if (!studentExists) {
      studentList.value.push({ id: answer.student_id })
    }
  }

  // Ê∑ªÂä†È´ò‰∫ÆÊï∞ÊçÆ
  const addHighlightData = (highlight: HighlightData) => {
    const existingIndex = highlightDataList.value.findIndex(
      (data) =>
        data.student_id === highlight.student_id && data.question_id === highlight.question_id,
    )
    if (existingIndex >= 0) {
      highlightDataList.value[existingIndex] = highlight
    } else {
      highlightDataList.value.push(highlight)
    }
  }

  // ===== Êï∞ÊçÆÈáçÁΩÆ =====
  const resetQuestions = () => {
    questions.value = []
  }

  const resetReferenceAnswers = () => {
    referenceAnswers.value = []
  }

  const resetStudentData = () => {
    studentAnswers.value = []
    studentList.value = []
    highlightDataList.value = []
  }

  const resetAllData = () => {
    resetQuestions()
    resetReferenceAnswers()
    resetStudentData()
  }

  // ===== Á§∫‰æãÊï∞ÊçÆ =====
  const loadExampleData = () => {
    if (questions.value.length === 0) {
      questions.value = [{ question_id: 1, question: 'Á§∫‰æãÈóÆÈ¢ò1', score: 10 }]
    }

    if (referenceAnswers.value.length === 0) {
      referenceAnswers.value = [{ question_id: 1, answer: 'Á§∫‰æãÂèÇËÄÉÁ≠îÊ°à1' }]
    }

    if (studentAnswers.value.length === 0) {
      studentAnswers.value = [{ student_id: 1, question_id: 1, answer: 'Â≠¶Áîü1ÁöÑÁ≠îÊ°à1' }]
      studentList.value = [{ id: 1 }]
    }

    console.log('üìù Á§∫‰æãÊï∞ÊçÆÂä†ËΩΩÂÆåÊàê')
  }

  // ===== Êú¨Âú∞Â≠òÂÇ® =====
  const saveToLocal = () => {
    try {
      localStorage.setItem('exam_questions', JSON.stringify(questions.value))
      localStorage.setItem('exam_reference_answers', JSON.stringify(referenceAnswers.value))
      localStorage.setItem('exam_student_answers', JSON.stringify(studentAnswers.value))
      localStorage.setItem('exam_student_list', JSON.stringify(studentList.value))
      localStorage.setItem('exam_highlight_data', JSON.stringify(highlightDataList.value))
    } catch (error) {
      console.error('‰øùÂ≠òÊï∞ÊçÆÂ§±Ë¥•:', error)
    }
  }

  const loadFromLocal = () => {
    try {
      const savedQuestions = localStorage.getItem('exam_questions')
      const savedReferenceAnswers = localStorage.getItem('exam_reference_answers')
      const savedStudentAnswers = localStorage.getItem('exam_student_answers')
      const savedStudentList = localStorage.getItem('exam_student_list')
      const savedHighlightData = localStorage.getItem('exam_highlight_data')

      if (savedQuestions) questions.value = JSON.parse(savedQuestions)
      if (savedReferenceAnswers) referenceAnswers.value = JSON.parse(savedReferenceAnswers)
      if (savedStudentAnswers) studentAnswers.value = JSON.parse(savedStudentAnswers)
      if (savedStudentList) studentList.value = JSON.parse(savedStudentList)
      if (savedHighlightData) highlightDataList.value = JSON.parse(savedHighlightData)
    } catch (error) {
      console.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error)
    }
  }

  return {
    // Áä∂ÊÄÅ
    questions,
    referenceAnswers,
    studentAnswers,
    studentList,
    highlightDataList,

    // ËÆ°ÁÆóÂ±ûÊÄß
    questionCount,
    referenceAnswerCount,
    studentCount,
    totalAnswerCount,
    getQuestionById,
    getReferenceAnswer,
    getStudentAnswer,
    getHighlightData,
    isDataComplete,

    // ÊñπÊ≥ï
    setQuestions,
    setReferenceAnswers,
    setStudentAnswers,
    setHighlightData,
    addQuestion,
    updateReferenceAnswer,
    updateReferenceAnswers,
    clearReferenceAnswers,
    addStudentAnswer,
    addHighlightData,
    resetQuestions,
    resetReferenceAnswers,
    resetStudentData,
    resetAllData,
    loadExampleData,
    saveToLocal,
    loadFromLocal,
  }
})
